plugins {
    id 'java-library'
    id 'io.qameta.allure' version '2.11.2' // https://plugins.gradle.org/plugin/io.qameta.allure
}


def selenideVersion = "6.13.0",
    allureVersion = "2.23.0",
    jUnitVersion = "5.9.3",
    slf4jVersion = "2.0.7"

allure {
    report {
        version.set(allureVersion)
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion)
            }
        }
    }
}

dependencies {
    testImplementation(
            "com.codeborne:selenide:$selenideVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "com.github.javafaker:javafaker:1.0.2",
            "org.junit.jupiter:junit-jupiter:$jUnitVersion",
            "org.slf4j:slf4j-simple:$slf4jVersion"
    )
}


repositories {
    mavenCentral()
}

dependencies {
    testImplementation(
            "com.codeborne:selenide:6.12.3",
            "org.junit.jupiter:junit-jupiter:5.8.2",
            "org.slf4j:slf4j-simple:2.0.6",
            "com.github.javafaker:javafaker:1.0.2",
            "com.codeborne:pdf-test:1.5.0",
            "com.codeborne:xls-test:1.4.3",
            "com.opencsv:opencsv:5.7.1",
            "com.fasterxml.jackson.core:jackson-core:2.13.1",
            "com.fasterxml.jackson.core:jackson-databind:2.13.1",
            "io.qameta.allure:allure-selenide:${allureVersion}" //https://mvnrepository.com/artifact/io.qameta.allure/allure-selenide
    )
}

tasks.withType(Test) {
    systemProperties(System.getProperties())
    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

test {
    useJUnitPlatform()
}

task remote_test(type: Test) {
    useJUnitPlatform {
        includeTags("remote")
    }
}
